extends ../layout

block body
  - var name = [user.firstname, user.lastname].join(' ')
  nav.navbar.navbar-default
    .container-fluid
      .navbar-header
        span.navbar-brand
          if user.id != current_user.id
            a(href="/user/" + current_user.username)
              span.glyphicon.glyphicon-home
            | &nbsp;
          = name
      ul.nav.navbar-nav.navbar-right
        li
          a(href="/logout") Выход
  .col-sm-3.text-center
    img#avatar(src="/user/avatar/"+user.id, alt=name)
    if user.id == current_user.id
      div.text-center
        a#select-avatar(href="#") Сменить аватар
    else if user.online
      div.text-center.vmiddle
        span.online.text-center.vmiddle.status-label
          | &bull;
        | &nbsp;Онлайн
    else
      div.text-center
        span.offline.text-center.vmiddle.status-label
          | &bull;
        | &nbsp;Оффлайн


  if user.id == current_user.id
    .col-sm-5
      .panel.panel-default
        .panel-heading
          h1.panel-title Друзья
        .panel-body
          h4 Запросы
          #requests
          h4 Мои друзья
          #friends
        .panel-footer
          button.btn.btn-default(type="button", data-toggle="modal", data-target="#newFriends") Найти новых друзей
    .col-sm-4
      .panel.panel-default
        .panel-heading
          h1.panel-title Карта
        #map.panel-body(style="height: 300px")
  else
    .col-sm-9
      .panel.panel-default
        .panel-heading
          h1.panel-title Карта
        #map.panel-body(style="height: 300px")
        .panel-footer
          div#no-location Нет информации о положении пользователя.


  #newFriends.modal.fade(tabindex='-1', role='dialog', aria-labelledby='newFriendsLabel')
    .modal-dialog(role='document')
      .modal-content
        .modal-header
          button.close(type='button', data-dismiss='modal', aria-label='Close')
            span(aria-hidden='true') ×
          h4#newFriendsLabel.modal-title Поиск новых друзей
        .modal-body
          | ...
        .modal-footer
          button.btn.btn-default(type='button', data-dismiss='modal') Закрыть

  #messages.modal.fade(tabindex=-1, role='dialog', aria-label='messagesLabel')
    .modal-dialog(role='document')
      .modal-content
        .modal-header
          button.close(type='button', data-dismiss='modal', aria-label='Close')
            span(aria-hidden='true') x
          h4#messagesLabel.modal-title Сообщения
        .modal-body
          | ...
        .modal-footer
          button.btn.btn-default(type='button', data-dismiss='modal') Закрыть

block styles
  link(rel="stylesheet", href="http://cdn.leafletjs.com/leaflet/v0.7.7/leaflet.css")
  link(rel="stylesheet" href="/styles/Leaflet.vector-markers.css")


block scripts
  script(src="/plupload-2.1.8/plupload.full.min.js")
  script(src="/plupload-2.1.8/i18n/ru.js")
  script(src="http://cdn.leafletjs.com/leaflet/v0.7.7/leaflet.js")
  script(src="/js/leaflet.vector-markers.min.js")
  script(type="text/javascript").
    $(function(){
      var user = JSON.parse('!{JSON.stringify(user)}');
      var current_user = JSON.parse('!{JSON.stringify(current_user)}');
      var map = L.map('map').setView([51.505, -0.09], 13);
      $('#no-location').hide();

      if (current_user.id != user.id) {
        //check if location is saved for the user
        var latitude = !{latitude?latitude:0};
        var longitude = !{longitude?longitude:0};

        if (latitude && longitude) {
          var color, popup;
          if (user.online == true) {
            color = 'green';
            popup = 'Пользователь '+[user.firstname, user.lastname].join(' ')+" онлайн. Представлено текущее положение."
          }
          else {
            color = 'grey';
            popup = 'Пользователь ' + [user.firstname, user.lastname].join(' ') + " оффлайн. " +
              "Представлено последнее сохранёное положение."

          }
          var marker = L.VectorMarkers.icon({
            icon: 'map-marker',
            markerColor: color
          });

          map.setView([latitude, longitude], 13);
          var map_marker = L.marker([latitude, longitude], {icon: marker});
          map_marker.addTo(map);
          map_marker.bindPopup(popup).openPopup();

        }
        // if there is no saved location show info
        else {
          $('#no-location').show();
        }
      }
      L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {
        attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors'
      }).addTo(map);

      map.on('locationfound', function(e) {
        map.setView([e.latitude, e.longitude], 13);
        L.marker([e.latitude, e.longitude]).addTo(map);
        $.ajax({
          url: '/user/location/'+user.id,
          method: 'PUT',
          data: {
            latitude: e.latitude,
            longitude: e.longitude
          },
          error: function (response) {
              alert("Ошибка при сохранении положения: " + response.error.message);
          }
        });

      });

      map.on('locationerror', function(e){
        console.log(e.message);
      });

      // locate user map only if he is viewing his own profile
      if (user.id == current_user.id) {
        map.locate();
      }

      //declare ids here to be accessable from io.sockets below
      // valuse are set from get_friends() and get_requests() respectfully
      var friends_ids;
      var requests_ids;

      function get_requests(){
        $.ajax({
          url: '/user/requests/'+user.id,
          method: 'GET'
        }).done(function(response){
          $('#requests').html(response.html_update);
          requests_ids = response.requests_ids;

          $('#requests .accept').on('click', function(e){
            $.ajax({
              url: '/user/requests',
              method: 'PUT',
              data: {
                id: $(e.target).data('id')
              }
            }).done(function(response){
              get_requests();
            });
          });

          $('#requests .decline').on('click', function(e){
            $.ajax({
              url: '/user/requests/'+$(e.target).data('id'),
              method: 'DELETE',
            }).done(function(response){
              get_requests();
            });
          });

        });
      };

      function get_friends(){
        $.ajax({
          url: '/user/friends/'+user.id,
          method: 'GET'
        }).done(function(response){

          $('#friends').html(response.html_update);
          friends_ids = response.friends_ids;

          $('.delete-friend').on('click', function(e){
            $.ajax({
              url: '/user/friends/'+$(e.target).data('id'),
              method: 'DELETE'
            }).done();
          });

        });
      };

      get_requests();
      get_friends();

      $('#newFriends').on('show.bs.modal', function(e){
        //clearing old results of friends searching
        $('#newFriends .modal-body').html('...');
        $.ajax({
          url: '/user/list',
          method: 'GET'
        }).done(function(response){

          $('#newFriends .modal-body').html(response);

          $(".request").on('click', function(e){
            $.ajax({
              url: '/user/request',
              method: 'GET',
              data: {
                id_requested: $(e.target).data('id')
              },
              success: function(response){
                if(response.success){
                  $(e.target).replaceWith('<span>'+response.message+'</span>');
                }
                else{
                  alert("Ошибка: "+ response.error.message);
                }
              }
            });
          });

        });
      });

      var uploader = new plupload.Uploader({
          browse_button: 'select-avatar',
          url: '/user/avatar',
          multi_selection: false,
          filters: {
            mime_types : [
                { title : "Image files", extensions : "jpg, jpeg" },
            ],
            max_file_size: "2000kb",
          },
          resize:{
            width: 200,
            height: 200,
            // in order to get square pics, we will crop the image before upload
            // TOD allow user to crop a desired part of a photo
            crop: true
          }
      });

      uploader.init();

      uploader.bind('FilesAdded', function(up, files){
        if(files.length){
          uploader.start();
        }
      });

      uploader.bind('FileUploaded', function(up, file, result){
        if(result.status == 200){
          var src = $('#avatar').attr('src').split('?',1)[0]+ '?_'+ new Date().getTime();
          $('#avatar').attr('src', src);
        }
        else{
          alert(result.response);
        }
      });

      io.socket.get('/user/subscribe', function(resData, jwres){
        return;
      });

      io.socket.on('request', function (event){
        switch (event.verb) {
          case 'created':
            var request = event.data;
            var user = request.id_requesting;
            if(user.id == request.id_requested.id){
              get_requests();
            }
            break;
          default:
            console.warn('Unrecognized socket event (`%s`) from server:',event.verb, event);
        }
      });

      io.socket.on('friend', function (event){
        switch (event.verb) {
          case 'created':
            if(user.id == event.data.id_user || user.id == event.data.id_friend){
              get_friends();
            }
            break;
          default:
            console.warn('Unrecognized socket event (`%s`) from server:',event.verb, event);
        }
      });

      io.socket.on('delete_friend', function(data){
        if(user.id == data.id_user || user.id == data.id_friend){
          get_friends();
        }
      });

      io.socket.on('friend_online', function (data) {
        if (friends_ids.indexOf(data.id_friend)>-1) {
          get_friends();
        }
        if (requests_ids.indexOf(data.id_friend) > -1) {
          get_requests();
        }

      });

      io.socket.on('friend_offline', function (data) {
        if (friends_ids.indexOf(data.id_friend) > -1) {
          get_friends();
        }
        if (requests_ids.indexOf(data.id_friend) > -1) {
          get_requests();
        }

      });

    });
